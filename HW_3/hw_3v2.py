# -*- coding: utf-8 -*-
"""HW_3v2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1biT3xQ2mhnfmKK3d0oqXJQ_jfdpOP_j1
"""

import pandas as pd
from sqlalchemy import create_engine
from sqlalchemy import text
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns

try:
      file_path = 'world_happiness_report_2015.csv'
      df_2015 = pd.read_csv(file_path)
      print(f"Файл {file_path} загружен")

except Exception as e: # Catching a more general exception
      print(f"Ошибка загрузки файла: {e}")

df_2015.head(10)

df_2015.info()
df_2015.select_dtypes(include='object').describe()

#Country - Название страны
#Region - регион мира
#Happiness Rank - Рейтинг страны по индексу счастьяprint
#Happiness Score - Метрика, измеренная в 2015 году путем опроса людей: «Как бы вы оценили свое счастье"
#Standard Error - Стандартная ошибка оценки счастья
#Economy (GDP per Capita) - Степень влияния ВВП на расчет индекса счастья
#Family - Степень, в которой семья вносит вклад в расчет индекса счастья
#Health (Life Expectancy) - Степень влияния продолжительности жизни на расчет индекса счастья
#Freedom - Степень, в которой свобода способствовала расчету индекса счастья
#Trust (Government Corruption) - Степень влияния восприятия коррупции на показатель счастья
#Generosity - Степень, в которой щедрость способствовала расчету индекса счастья
#Dystopia Residual - Степень, в которой остаток антиутопии повлиял на расчет индекса счастья

df_2015.describe()

df_2015.isnull()

#Установка PostgreSQL
!apt-get install postgresql postgresql-contrib -y
#Запуск сервера
!service postgresql start

#Создание пользователя и базы данных
!sudo -u postgres psql -c "CREATE USER colab_user WITH PASSWORD 'password';"
!sudo -u postgres psql -c "CREATE DATABASE colab_db;"
!sudo -u postgres psql -c "ALTER ROLE colab_user SET client_encoding TO 'utf8';"
!sudo -u postgres psql -c "ALTER ROLE colab_user SET timezone TO 'UTC';"
!sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE colab_db TO colab_user;"

#Подключение
from sqlalchemy import create_engine
from sqlalchemy import text

engine = create_engine("postgresql://colab_user:password@localhost:5432/colab_db")
print("Подключение к PostgreSQL установлено")

ddl = """
DROP TABLE IF EXISTS world_happiness CASCADE;

CREATE TABLE world_happiness (
   country     VARCHAR(50) PRIMARY KEY,
   region      VARCHAR(50),
   hap_rank    INT,
   hap_score   NUMERIC(9,6),
   st_error    NUMERIC(9,6),
   economy     NUMERIC(9,6),
   family      NUMERIC(9,6),
   health      NUMERIC(9,6),
   freedom     NUMERIC(9,6),
   trust       NUMERIC(9,6),
   generosity  NUMERIC(9,6),
   dystopia    NUMERIC(9,6)
);
"""

with engine.connect() as conn:
    conn.execute(text(ddl))
    conn.commit()
    print("Таблицы созданы")

# Количество строк
with engine.connect() as conn:
  res = conn.execute(text("SELECT COUNT(*) FROM world_happiness"))
  cnt = res.scalar()
  print(f"В таблице {cnt:,} строк")

# Загружаем таблицу
hap_df = df_2015[["Country",
                  "Region",
                  "Happiness Rank",
                  "Happiness Score",
                  "Standard Error",
                  "Economy (GDP per Capita)",
                  "Family",
                  "Health (Life Expectancy)",
                  "Freedom",
                  "Trust (Government Corruption)",
                  "Generosity",
                  "Dystopia Residual"]].rename(
    columns={"Country": "country",
             "Region": "region",
             "Happiness Rank": "hap_rank",
             "Happiness Score": "hap_score",
             "Standard Error": "st_error",
             "Economy (GDP per Capita)": "economy",
             "Family": "family",
             "Health (Life Expectancy)": "health",
             "Freedom": "freedom",
             "Trust (Government Corruption)": "trust",
             "Generosity": "generosity",
             "Dystopia Residual": "dystopia"}
)
hap_df.to_sql("world_happiness", engine, if_exists="append", index=False)

# Количество загруженных строк
with engine.connect() as conn:
  res = conn.execute(text("SELECT COUNT(*) FROM world_happiness"))
  cnt = res.scalar()
  print(f"В таблице {cnt:,} строк")

with engine.connect() as conn:
  sample_df = pd.read_sql("SELECT * FROM world_happiness order by hap_score desc", engine)
  print("Данные:")
  display(sample_df)

# Количетво стран по регионам
sql_txt = """
select wh.region AS region, count(distinct wh.country) AS cnt_country
FROM world_happiness wh
group BY wh.region
ORDER BY cnt_country DESC;
"""
res = pd.read_sql(sql_txt, engine)
display(res)

#Решил еще справочник регионов создать с автоматической генерацией ID
ddl = """
DROP TABLE IF EXISTS world_regions CASCADE;

CREATE TABLE world_regions (
   id_region   serial PRIMARY KEY,
   region_name VARCHAR(50) UNIQUE
);
"""

with engine.connect() as conn:
    conn.execute(text(ddl))
    conn.commit()
    print("Таблица создана")

unique_region = df_2015['Region'].unique()
print(unique_region)

#заполняе справочник
with engine.begin() as conn:
  for _, row in df_2015.iterrows():
    reg = row['Region']
    print(f"{reg}")
    res = conn.execute(text("INSERT INTO world_regions(region_name) VALUES (:r) ON CONFLICT(region_name) DO NOTHING RETURNING id_region"), {"r": reg})
    print(f"{res}")

#Содержимое справочника
sql_txt = """
select *
FROM world_regions wr
"""
res = pd.read_sql(sql_txt, engine)
display(res)

#Количество стран по регионам
sql_txt = """
select wr.region_name region, count(wh.region) cnt
FROM world_happiness wh
JOIN world_regions wr ON wh.region = wr.region_name
GROUP BY wr.region_name
"""
res = pd.read_sql(sql_txt, engine)
display(res)

import matplotlib.pyplot as plt
import numpy as np

mylabels = res['region']

def make_autopct(values):
    def my_autopct(pct):
        total = sum(values)
        val = int(round(pct*total/100.0))
        return '{v:d}'.format(p=pct,v=val)
    return my_autopct

plt.pie(res['cnt'], labels =  mylabels, radius=1.2, autopct=make_autopct(res['cnt']))
plt.legend(title = "Список регионов:",loc="center left",bbox_to_anchor=(2, 0, 0.5, 1))
plt.title('Количество стран по регионам', loc='center' , pad=30)
plt.show()

#Добавим столбец
ddl = """
ALTER TABLE world_regions
ADD COLUMN short_name varchar(50);
""";

with engine.connect() as conn:
    conn.execute(text(ddl))
    conn.commit()
    print("Поле создано")

#Проверим добавление
sql_txt = """
select * from world_regions wr
"""
res = pd.read_sql(sql_txt, engine)
display(res)

update_query = """
update world_regions
set short_name=
        case
           when region_name='Western Europe' then 'WEST_EUR'
           when region_name='North America' then 'N_AMER'
           when region_name='Australia and New Zealand' then 'AUS_NZ'
           when region_name='Middle East and Northern Africa' then 'ME_NAF'
           when region_name='Latin America and Caribbean' then 'L_AMER'
           when region_name='Southeastern Asia' then 'SE_ASIA'
           when region_name='Central and Eastern Europe' then 'C_E_EUR'
           when region_name='Eastern Asia' then 'E_ASIA'
           when region_name='Sub-Saharan Africa' then 'AFR'
           when region_name='Southern Asia' then 'S_ASIA'
           else 'N/A'
         end
     """
with engine.connect() as conn:
  conn.execute(text(update_query))
  conn.commit() # Commit the changes

#Проверим update
sql_txt = """
select * from world_regions wr
"""
res = pd.read_sql(sql_txt, engine)
display(res)

#Среднее значение очков счастья по регионам
sql_txt = """
select wh.region AS region, AVG(wh.hap_score) AS avg_score
FROM world_happiness wh
group BY wh.region
order by avg_score desc;
"""
res = pd.read_sql(sql_txt, engine)
display(res)

sns.barplot(
    data=res,
    x="avg_score",
    y="region",
    hue="region",
    legend=False
)
plt.title("Средние очки счастья по регионам", pad=20)
plt.xlabel("Средние очки счастья")
plt.ylabel("Регион")
plt.show()

#Для проверки расчета посмотрим данные
sql_txt = """
select wh.country as country, wh.hap_score AS hap_score
FROM world_happiness wh
WHERE upper(wh.region) = upper('Australia and New Zealand')
order by 1;
"""
res = pd.read_sql(sql_txt, engine)
display(res)

# Экономика и счастье
sql_txt = """
select wh.economy AS economy, wh.hap_score AS hap_score
FROM world_happiness wh;
"""
res = pd.read_sql(sql_txt, engine)

sns.scatterplot(data=res, x="economy", y="hap_score");